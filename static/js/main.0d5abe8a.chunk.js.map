{"version":3,"sources":["config/logo.svg","config/single-column.svg","config/three-columns.svg","components/ImageBox/index.jsx","components/IconButton/index.js","components/Layout/index.jsx","components/List/index.jsx","components/NavBar/index.jsx","components/SearchBar/index.jsx","config/config.js","utils/build-search-url.js","utils/is-at-bottom.js","utils/get-search-results.js","hooks/useDebounce.js","hooks/useInfiniteScroll.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ImageBox","data","img","columns","images","fixed_width","url","webp","className","data-testid","title","type","srcSet","src","alt","IconButton","text","onClick","Layout","children","List","items","isPristine","isLoading","hasResults","length","pristineMessage","role","aria-label","noResultsMessage","isLoadingMessage","map","datum","key","id","NavBar","SearchBar","props","keywords","updateKeywords","value","placeholder","onChange","GIPHY_URL","API_KEY","DEFAULT_QUERY","limit","offset","rating","lang","buildSearchUrl","options","query","Object","assign","entries","k","v","isAtBottom","container","document","documentElement","MANUAL_OFFSET","windowBaseline","window","innerHeight","scrollY","containerBaseline","offsetHeight","getSearchResults","q","a","async","fetch","res","json","Error","useDebounce","val","delay","useState","debouncedVal","setDebouncedVal","useEffect","timeout","setTimeout","clearTimeout","useInfiniteScroll","fetchData","setIsLoading","hasError","setHasError","setQuery","count","total","pagination","setPagination","results","setResults","loadMore","useCallback","handleScroll","useLayoutEffect","addEventListener","removeEventListener","shouldLoad","then","Array","isArray","catch","err","App","setKeywords","setIsPristine","debouncedKeywords","search","setColumns","undefined","updateColumn","param","e","scrollTo","logo","target","iconSingleColumn","iconThreeColumns","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0d5abe8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04e09dee.svg\";","module.exports = __webpack_public_path__ + \"static/media/single-column.e7d93e18.svg\";","module.exports = __webpack_public_path__ + \"static/media/three-columns.ba5f9835.svg\";","import React from 'react';\nimport './ImageBox.scss';\n\nconst ImageBox = ({data, columns}) => {\n  const img = data.images.fixed_width.url;\n  const webp = data.images.fixed_width.webp;\n\n  return (\n    <div\n      className=\"ug-image-box\"\n      data-testid=\"ug-image-box\"\n    >\n      <h5 className=\"ug-image-box__title\">{data.title}</h5>\n      <picture>\n        <source type=\"image/webp\" srcSet={webp} />\n        <img\n          className=\"ug-image-box__img\"\n          src={img}\n          alt={data.title}\n        />\n      </picture>\n    </div>\n  )\n}\n\nexport default ImageBox;\n","import React from 'react';\nimport './IconButton.scss';\n\nconst IconButton = ({className, img, text, onClick}) => {\n  return (\n    <img\n      className={`ug-icon-button ${className}`}\n      data-testid=\"ug-icon-button\"\n      src={img}\n      alt={text}\n      onClick={onClick}\n    />\n  )\n}\n\nexport default IconButton;\n\n\n","import React from 'react';\nimport './Layout.scss';\n\nconst Layout = ({children}) => {\n  return (\n    <section\n      className=\"ug-layout\"\n      data-testid=\"ug-layout\"\n    >\n      {children}\n    </section>\n  )\n}\n\nexport default Layout;\n","import React from 'react';\nimport './List.scss';\nimport ImageBox from '../ImageBox';\n\nconst List = ({columns = 1, items = [], isPristine = true, isLoading = false}) => {\n  const hasResults = !!items.length;\n  const pristineMessage = (\n    <li className=\"ug-list__item ug-list__item--is-pristine\">\n      <h2 className=\"ug-list__item-title\">Uber Giphy</h2>\n      <h4 className=\"ug-list__item-subtitle\">crafted by kavare\n        <span role=\"img\" aria-label=\"love\"> 😊 </span>\n      </h4>\n    </li>\n  );\n\n  const noResultsMessage = (\n    <li className=\"ug-list__item ug-list__item--no-results\">\n      <h2 className=\"ug-list__item-title\">No results here\n        <span role=\"img\" aria-label=\"Try again\"> 🐶 </span><br/>\n        Let's try again!!\n      </h2>\n    </li>\n  );\n\n  const isLoadingMessage = (\n    <li className=\"ug-list__item ug-list__item--no-results\">\n      <h2 className=\"ug-list__item-title\">Launching...\n        <span role=\"img\" aria-label=\"Launching\"> 🚀 </span>\n      </h2>\n    </li>\n  );\n\n  return (\n    <ul className={`\n        ug-list\n        ${columns === 3 ? 'ug-list--three-column' : 'ug-list--single-column'}\n        ${hasResults ? '' : 'ug-list--no-results' }\n        ${isPristine ? 'ug-list--is-pristine' : '' }\n     `}\n      data-testid=\"ug-list\"\n    >\n      {\n        isPristine\n          ? pristineMessage\n          : hasResults\n            ? items.map(datum => (\n              <li className=\"ug-list__item\" key={datum.id}>\n                <ImageBox key={datum.id} data={datum} columns={columns} />\n              </li>\n            ))\n            : isLoading\n              ? isLoadingMessage\n              : noResultsMessage\n      }\n    </ul>\n  )\n}\n\nexport default List;\n","import React from 'react';\nimport './NavBar.scss';\n\nconst NavBar = ({children}) => {\n  return (\n    <header className=\"ug-navbar\" data-testid=\"ug-navbar\">\n      {children}\n    </header>\n  )\n}\n\nexport default NavBar;\n","import React from 'react';\nimport './SearchBar.scss';\n\nconst SearchBar = (props) => {\n  const {\n    className,\n    keywords,\n    updateKeywords,\n  } = props;\n\n  return (\n    <div\n      className={`ug-searchbar ${className}`}\n      data-testid=\"ug-searchbar\"\n    >\n      <input\n        className=\"ug-searchbar__input\"\n        data-testid=\"ug-searchbar__input\"\n        type=\"text\"\n        value={keywords}\n        placeholder=\"Search Giphy...\"\n        onChange={updateKeywords}\n      />\n    </div>\n  )\n}\n\nexport default SearchBar;\n","const GIPHY_URL = 'https://api.giphy.com/v1/gifs/search';\nconst API_KEY = 'CdRKiCMbTnt9CkZTZ0lGukSczk6iT4Z6';\nconst DEFAULT_QUERY = {\n  limit: 24,\n  offset: 0,\n  rating: 'G',\n  lang: 'en',\n};\n\nexport {\n  GIPHY_URL,\n  API_KEY,\n  DEFAULT_QUERY,\n}","import {\n  GIPHY_URL,\n  API_KEY,\n  DEFAULT_QUERY,\n} from '../config/config.js';\n\nconst buildSearchUrl = (options = {}) => {\n  // [NOTE] GIPHY API Signature:\n  // q=kittens&limit=5&offset=0&rating=G&lang=en\n  let url = `${GIPHY_URL}?api_key=${API_KEY}`;\n  let query = Object.assign({}, DEFAULT_QUERY, options);\n\n  for (let [k, v] of Object.entries(query)) {\n    url += `&${k}=${v}`;\n  }\n\n  return url;\n}\n\nexport default buildSearchUrl;\n","const isAtBottom = (container = document.documentElement) => {\n  // [NOTE] Use magic number to trigger load more \"just before\" the page end for better UX\n  const MANUAL_OFFSET = 30;\n  const windowBaseline = window.innerHeight + window.scrollY;\n  const containerBaseline = container.offsetHeight - MANUAL_OFFSET;\n\n  return windowBaseline >= containerBaseline;\n}\n\nexport default isAtBottom;\n","import buildSearchUrl from './build-search-url';\n\nconst getSearchResults = async (q, offset) => {\n  const url = buildSearchUrl({q, offset});\n\n  try {\n    const res = await fetch(url);\n    const data = await res.json();\n    return data;\n  } catch (e) {\n    throw Error(e);\n  }\n}\n\nexport default getSearchResults;\n","import { useState, useEffect } from 'react';\n\nconst useDebounce = (val, delay = 500) => {\n  const [debouncedVal, setDebouncedVal] = useState(val);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setDebouncedVal(val);\n    }, delay);\n\n    return () => clearTimeout(timeout);\n  });\n\n  return debouncedVal;\n};\n\nexport default useDebounce;\n","import { useState, useEffect, useCallback, useLayoutEffect } from 'react';\nimport { isAtBottom } from '../utils';\n\nconst useInfiniteScroll = (fetchData) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [query, setQuery] = useState('');\n  const [pagination, setPagination] = useState({count: 0, total: 0, offset: 0});\n  const [results, setResults] = useState([]);\n\n  const loadMore = useCallback(() => {\n    return fetchData(query, pagination.offset + pagination.count);\n  }, [query, pagination, fetchData]);\n\n  const handleScroll = useCallback(() => {\n    if (isLoading || !isAtBottom() || results.length === 0) return;\n    setIsLoading(true);\n  }, [isLoading, results]);\n\n  useLayoutEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [handleScroll])\n\n  useEffect(() => {\n    // [NOTE] Prevent request in initial state or reset to empty string\n    let shouldLoad = !!query.length;\n    setPagination({count: 0, total: 0, offset: 0});\n    setResults([]);\n    setIsLoading(shouldLoad);\n  }, [query])\n\n\n  useEffect(() => {\n    if (!isLoading) return;\n    loadMore()\n      .then(({data, pagination}) => {\n        if (!Array.isArray(data)) data = [];\n        setPagination(pagination);\n        setResults(results => [...results, ...data]);\n        setIsLoading(false);\n        setHasError(false);\n      })\n      .catch(err => {\n        setPagination({count: 0, total: 0, offset: 0});\n        setResults([]);\n        setIsLoading(false);\n        setHasError(true);\n      })\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isLoading])\n\n\n  return [results, isLoading, hasError, setQuery];\n};\n\nexport default useInfiniteScroll;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport logo from './config/logo.svg';\nimport iconSingleColumn from './config/single-column.svg';\nimport iconThreeColumns from './config/three-columns.svg';\n\nimport {\n  NavBar,\n  Layout,\n  List,\n  SearchBar,\n  IconButton,\n} from './components';\n\nimport {\n  getSearchResults,\n} from './utils';\n\nimport {\n  useDebounce,\n  useInfiniteScroll,\n} from './hooks';\n\nfunction App() {\n  const [keywords, setKeywords] = useState('');\n  const [isPristine, setIsPristine] = useState(true);\n  const [results, isLoading, hasError, setQuery] = useInfiniteScroll(getSearchResults);\n  const debouncedKeywords = useDebounce(keywords, 500);\n  const search = useCallback(setQuery);\n  const [columns, setColumns] = useState(1);\n\n  useEffect(() => {\n    if (debouncedKeywords === undefined) return;\n    search(debouncedKeywords);\n  }, [debouncedKeywords, search]);\n\n\n  const updateKeywords = (e) => {\n    let keywords = e.target.value;\n    setKeywords(keywords);\n\n    // [NOTE] UX Improvement: prevent flashing no results screen when users start\n    //        searching from initial state\n    setTimeout(() => setIsPristine(false), 1000);\n  }\n\n  const updateColumn = param => e => {\n    // [NOTE] UX Improvement: fix the \"jumpy\" issue when transition to 3-column\n    //        mode. Force the screen to move to the top to prevent the scrollbar\n    //        remain at the bottom after (n mod 3).\n    window.scrollTo(0, 0);\n    setColumns(param);\n  }\n\n  const backToHome = (e) => {\n    setKeywords('');\n    setIsPristine(true);\n  }\n\n  return (\n    <div className=\"ug-app\">\n      <NavBar>\n        <img\n          className=\"ug-navbar__icon\"\n          src={logo}\n          alt=\"Uber Giphy\"\n          title=\"Click to resume to initial state\"\n          onClick={backToHome}\n        />\n        <SearchBar\n          className=\"ug-navbar__search\"\n          keywords={keywords}\n          updateKeywords={updateKeywords}\n        />\n        <div className=\"ug-navbar__button-group\">\n          <IconButton\n            className={`\n              ug-navbar__button\n              ${columns === 1 ? 'ug-icon-button--is-active' : ''}\n            `}\n            img={iconSingleColumn}\n            text=\"Single Column Layout\"\n            onClick={updateColumn(1)}\n          />\n          <IconButton\n            className={`\n              ug-navbar__button\n              ${columns === 3 ? 'ug-icon-button--is-active' : ''}\n            `}\n            img={iconThreeColumns}\n            text=\"Three Columns Layout\"\n            onClick={updateColumn(3)}\n          />\n        </div>\n      </NavBar>\n      <Layout>\n        { hasError &&\n          <h4 className=\"ug-message ug-message--is-error\">\n            <span role=\"img\" aria-label=\"lost connection\"> 🕵 </span>You might lose the internet connection, please try again\n          </h4>\n        }\n        { isLoading &&\n          <h4 className=\"ug-message ug-message--is-success\">\n            <span role=\"img\" aria-label=\"loading\"> ⏳ </span>Loading...\n          </h4>\n        }\n        <List\n          columns={columns}\n          items={results}\n          isPristine={isPristine}\n          isLoading={isLoading}\n        />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}