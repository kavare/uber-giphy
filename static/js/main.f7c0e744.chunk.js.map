{"version":3,"sources":["config/logo.svg","config/single-column.svg","config/three-columns.svg","components/ImageBox/index.jsx","components/IconButton/index.js","components/Layout/index.jsx","components/List/index.jsx","components/NavBar/index.jsx","components/SearchBar/index.jsx","config/config.js","utils/build-search-url.js","utils/is-at-bottom.js","utils/get-search-results.js","hooks/useDebounce.js","hooks/useInfiniteScroll.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ImageBox","data","imgUrl","columns","images","fixed_height","webp","fixed_width","className","title","src","alt","IconButton","img","text","onClick","Layout","children","List","items","isPristine","isLoading","hasResults","length","data-testid","map","datum","key","id","NavBar","SearchBar","props","keywords","updateKeywords","type","value","placeholder","onChange","DEFAULT_QUERY","limit","offset","rating","lang","buildSearchUrl","options","url","query","Object","assign","entries","k","v","isAtBottom","container","document","documentElement","window","innerHeight","scrollTop","offsetHeight","getSearchResults","q","a","async","fetch","res","json","console","log","useDebounce","val","delay","useState","debouncedVal","setDebouncedVal","useEffect","timeout","setTimeout","clearTimeout","useInfiniteScroll","fetchData","setIsLoading","setQuery","count","total","pagination","setPagination","results","setResults","loadMore","useCallback","handleScroll","addEventListener","removeEventListener","then","App","setKeywords","setIsPristine","debouncedKeywords","search","setColumns","undefined","logo","e","target","iconSingleColumn","iconThreeColumns","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7c0e744.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04e09dee.svg\";","module.exports = __webpack_public_path__ + \"static/media/single-column.e7d93e18.svg\";","module.exports = __webpack_public_path__ + \"static/media/three-columns.ba5f9835.svg\";","import React from 'react';\nimport './ImageBox.scss';\n\nconst ImageBox = ({data, columns}) => {\n  const imgUrl = (columns === 3)\n    ? data.images.fixed_height.webp\n    : data.images.fixed_width.webp\n\n  return (\n    <div className=\"ug-image-box\">\n      <h5 className=\"ug-image-box__title\">{data.title}</h5>\n      <img\n        className=\"ug-image-box__img\"\n        src={imgUrl}\n        alt={data.title}\n      />\n    </div>\n  )\n}\n\nexport default ImageBox;\n\n\n","import React from 'react';\nimport './IconButton.scss';\n\nconst IconButton = ({className, img, text, onClick}) => {\n  return (\n    <img\n      className={`ug-icon-button ${className}`}\n      src={img}\n      alt={text}\n      onClick={onClick}\n    />\n  )\n}\n\nexport default IconButton;\n\n\n","import React from 'react';\nimport './Layout.scss';\n\nconst Layout = ({children}) => {\n  return (\n    <section className=\"ug-layout-wrapper\">\n      {children}\n    </section>\n  )\n}\n\nexport default Layout;\n","import React from 'react';\nimport './List.scss';\nimport ImageBox from '../ImageBox';\n\nconst List = ({columns = 1, items = [], isPristine = true, isLoading = false}) => {\n  const hasResults = !!items.length;\n  return (\n    <ul className={`\n        ug-list\n        ${columns === 3 ? 'ug-list--three-column' : 'ug-list--single-column'}\n        ${hasResults ? '' : 'ug-list--no-results' }\n     `}\n      data-testid=\"ug-list\"\n    >\n      {\n        hasResults\n          ? items.map(datum => (\n            <li className=\"ug-list__item\" key={datum.id}><ImageBox data={datum} columns={columns} /></li>\n          ))\n          : isPristine\n            ? <h2 className=\"ug-list__item--is-pristine\">Uber Giphy :) <span className=\"ug-list__item-footnote\">by kavare</span></h2>\n            : isLoading\n              ? <h2 className=\"ug-list__item--is-loading\">Loading......</h2>\n              : <h2 className=\"ug-list__item--no-results\">No results here :( How about trying new keywords?</h2>\n      }\n    </ul>\n  )\n}\n\nexport default List;\n","import React from 'react';\nimport './NavBar.scss';\n\nconst NavBar = ({children}) => {\n  return (\n    <header className=\"ug-navbar\" data-testid=\"ug-navbar\">\n      {children}\n    </header>\n  )\n}\n\nexport default NavBar;\n","import React from 'react';\nimport './SearchBar.scss';\n\nconst SearchBar = (props) => {\n  const {\n    className,\n    keywords,\n    updateKeywords,\n  } = props;\n\n  return (\n    <div className={`ug-searchbar ${className}`}>\n      <input\n        className=\"ug-searchbar__input\"\n        type=\"text\"\n        value={keywords}\n        placeholder=\"Search Giphy...\"\n        onChange={updateKeywords}\n      />\n    </div>\n  )\n}\n\nexport default SearchBar;\n","const GIPHY_URL = 'https://api.giphy.com/v1/gifs/search';\nconst API_KEY = 'CdRKiCMbTnt9CkZTZ0lGukSczk6iT4Z6';\nconst DEFAULT_QUERY = {\n  limit: 10,\n  offset: 0,\n  rating: 'G',\n  lang: 'en',\n};\n\nexport {\n  GIPHY_URL,\n  API_KEY,\n  DEFAULT_QUERY,\n}","import {\n  GIPHY_URL,\n  API_KEY,\n  DEFAULT_QUERY,\n} from '../config/config.js';\n\nconst buildSearchUrl = (options) => {\n  // [NOTE] GIPHY API Signature:\n  // q=kittens&limit=5&offset=0&rating=G&lang=en\n  let url = `${GIPHY_URL}?api_key=${API_KEY}`;\n  let query = Object.assign({}, DEFAULT_QUERY, options);\n\n  for (let [k, v] of Object.entries(query)) {\n    url += `&${k}=${v}`;\n  }\n\n  return url;\n}\n\nexport default buildSearchUrl;\n","const isAtBottom = (container = document.documentElement) => {\n  return window.innerHeight + container.scrollTop >= container.offsetHeight - 100;\n}\n\nexport default isAtBottom;\n","import buildSearchUrl from './build-search-url';\n\nconst getSearchResults = async (q, offset) => {\n  const url = buildSearchUrl({q, offset});\n\n  try {\n    const res = await fetch(url);\n    const data = await res.json();\n    return data;\n  } catch (e) {\n    console.log(e);\n    return [];\n  }\n}\n\nexport default getSearchResults;\n","import { useState, useEffect } from 'react';\n\nconst useDebounce = (val, delay = 500) => {\n  const [debouncedVal, setDebouncedVal] = useState(val);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setDebouncedVal(val);\n    }, delay);\n\n    return () => clearTimeout(timeout);\n  });\n\n  return debouncedVal;\n};\n\nexport default useDebounce;\n","import { useState, useEffect, useCallback } from 'react';\nimport { isAtBottom } from '../utils';\n\nconst useInfiniteScroll = (fetchData) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [pagination, setPagination] = useState({count: 0, total: 0, offset: 0});\n  const [results, setResults] = useState([]);\n\n  const loadMore = useCallback(() => {\n    return fetchData(query, pagination.offset + pagination.count);\n  }, [query, pagination, fetchData]);\n\n  const handleScroll = useCallback(() => {\n    if (isLoading || !isAtBottom()) return;\n    setIsLoading(true);\n  }, [isLoading]);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [handleScroll])\n\n  useEffect(() => {\n    setPagination({count: 0, total: 0, offset: 0});\n    setResults([]);\n    setIsLoading(true);\n  }, [query])\n\n\n  useEffect(() => {\n    if (!isLoading) return;\n    loadMore()\n      .then(({data, pagination}) => {\n        setPagination(pagination);\n        setResults(results => [...results, ...data]);\n        setIsLoading(false);\n      })\n  }, [isLoading, loadMore])\n\n\n  return [results, isLoading, setQuery];\n};\n\nexport default useInfiniteScroll;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport logo from './config/logo.svg';\nimport iconSingleColumn from './config/single-column.svg';\nimport iconThreeColumns from './config/three-columns.svg';\n\nimport {\n  NavBar,\n  Layout,\n  List,\n  SearchBar,\n  IconButton,\n} from './components';\n\nimport {\n  getSearchResults,\n} from './utils';\n\nimport {\n  useDebounce,\n  useInfiniteScroll,\n} from './hooks';\n\nfunction App() {\n  const [keywords, setKeywords] = useState('');\n  const [isPristine, setIsPristine] = useState(true);\n  const [results, isLoading, setQuery] = useInfiniteScroll(getSearchResults);\n  const debouncedKeywords = useDebounce(keywords, 500);\n  const search = useCallback(setQuery);\n  const [columns, setColumns] = useState(1);\n\n  useEffect(() => {\n    if (debouncedKeywords === undefined) return;\n    search(debouncedKeywords);\n  }, [debouncedKeywords, search]);\n\n\n  const updateKeywords = (e) => {\n    let keywords = e.target.value;\n    setKeywords(keywords);\n    setIsPristine(false);\n  }\n\n  const backToHome = (e) => {\n    setKeywords('');\n    setIsPristine(true);\n  }\n\n  return (\n    <div className=\"ug-app\">\n      <NavBar>\n        <img\n          className=\"ug-navbar__icon\"\n          src={logo}\n          alt=\"Uber Giphy\"\n          title=\"Click to resume to initial state\"\n          onClick={backToHome}\n        />\n        <SearchBar\n          className=\"ug-navbar__search\"\n          keywords={keywords}\n          updateKeywords={updateKeywords}\n        />\n        <IconButton\n          className={columns === 1 ? 'ug-icon-button--is-active' : ''}\n          img={iconSingleColumn}\n          text=\"Single Column Layout\"\n          onClick={() => setColumns(1)}\n        />\n        <IconButton\n          className={columns === 3 ? 'ug-icon-button--is-active' : ''}\n          img={iconThreeColumns}\n          text=\"Three Columns Layout\"\n          onClick={() => setColumns(3)}\n        />\n      </NavBar>\n      <Layout>\n        <List\n          columns={columns}\n          items={results}\n          isPristine={isPristine}\n          isLoading={isLoading}\n        />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}